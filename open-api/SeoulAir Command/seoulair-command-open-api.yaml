openapi: 3.0.1
info:
  title: SeoulAir Command microservice.
  description: |-
    SeoulAir Command is microservice that is part of SeoulAir project.
    For more documentation visit: URI
  contact:
    name: Gitlab Repository
    url: 'http://gitlab.com/seoulair/seoulair-analytics.git'
  version: 1.0.0
servers:
  - url: 'http://localhost:5800'
paths:
  '/api/Command/{id}':
    get:
      tags:
        - Command
      summary: Read (CRUD) operation. Gets the Command from MongoDb Database. Matches the record by Id.
      parameters:
        - name: id
          in: path
          description: Unique string that represents the entity in database.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Operation completed successfully, requested resource found and returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommandDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommandDto'
        '204':
          description: 'Operation completed successfully, requested resource does not exist'
  /api/Command:
    get:
      tags:
        - Command
      summary: Read (CRUD) operation. Gets the Command from MongoDb Database. Matches the record by Command Name.
      parameters:
        - name: name
          in: query
          description: Unique string that represents name of command.
          schema:
            type: string
      responses:
        '200':
          description: 'Operation completed successfully, requested resource found and returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommandDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommandDto'
        '204':
          description: 'Operation completed successfully, requested resource does not exist'
    post:
      tags:
        - Command
      summary: Create (CRUD) operation. Creates the Command instance in Microsoft Sql Server Database.
      description: "Id should not be passed. If it is passed it is going to be ignored.\r\nId is generated by the system"
      requestBody:
        description: Command to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CommandDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommandDto'
      responses:
        '201':
          description: "Operation completed successfully,\r\n            data record has been created with returned id."
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    delete:
      tags:
        - Command
      summary: Deletes (CRUD) operation. Deletes Command from the database.
      parameters:
        - name: id
          in: query
          description: Unique string that represents the entity to be deleted.
          schema:
            type: string
      responses:
        '204':
          description: 'Operation completed successfully, Command has been deleted from database'
    put:
      tags:
        - Command
      summary: Updates (CRUD) operation. Updates Alert from the database.
      parameters:
        - name: id
          in: query
          description: Unique string that represents command in database.
          schema:
            type: string
      requestBody:
        description: New state of Command that needs to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommandDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CommandDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommandDto'
      responses:
        '204':
          description: 'Operation completed successfully, Command has been updated'
  /api/Command/page:
    get:
      tags:
        - Command
      summary: Reads multiple entries from database but in paginated form.
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: isDescending
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: 'Operation completed successfully, one page returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommandDtoPaginatedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDtoPaginatedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CommandDtoPaginatedResultDto'
  /api/Executioner/execute:
    put:
      tags:
        - Executioner
      summary: Executes the command.
      requestBody:
        description: Request with execution parameters. Command name from database and it's parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/ExecutionRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExecutionRequest'
      responses:
        '200':
          description: Success
components:
  schemas:
    CommandDto:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        controller:
          type: string
          nullable: true
        endpoint:
          type: string
          nullable: true
        numOfParameters:
          type: integer
          format: int32
        httpMethod:
          type: string
          nullable: true
      additionalProperties: false
    CommandDtoPaginatedResultDto:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/CommandDto'
          nullable: true
        pageIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalRecords:
          type: integer
          format: int32
      additionalProperties: false
    ExecutionRequest:
      type: object
      properties:
        commandName:
          type: string
          nullable: true
        parameters:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
