openapi: 3.0.1
info:
  title: SeoulAir Analytics microservice.
  description: |-
    SeoulAir Analytics is microservice that is part of SeoulAir project.
    For more information visit Gitlab Repository
  contact:
    name: Gitlab Repository
    url: 'http://gitlab.com/seoulair/seoulair-analytics.git'
  version: 1.0.0
servers:
  - url: 'http://localhost:5700'
paths:
  /api/Alert:
    get:
      tags:
        - Alert
      summary: Read (CRUD) operation. Gets the Alert from MongoDb Database. Matches the record by Id.
      parameters:
        - name: id
          in: query
          description: Unique string that represents the entity in database.
          schema:
            type: string
      responses:
        '200':
          description: 'Operation completed successfully, requested resource found and returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
        '204':
          description: 'Operation completed successfully, requested resource does not exist'
    post:
      tags:
        - Alert
      summary: Create (CRUD) operation. Creates the Alert instance in MongoDb Database.
      description: "Id should not be passed. If it is passed it is going to be ignored.\r\nId is generated by the system"
      requestBody:
        description: Alert to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertDto'
          text/json:
            schema:
              $ref: '#/components/schemas/AlertDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AlertDto'
      responses:
        '201':
          description: "Operation completed successfully,\r\n            data record has been created with returned id."
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    delete:
      tags:
        - Alert
      summary: Deletes (CRUD) operation. Deletes Alert from the database.
      parameters:
        - name: id
          in: query
          description: Unique string that represents the entity to be deleted.
          schema:
            type: string
      responses:
        '204':
          description: 'Operation completed successfully, Alert has been deleted from database'
    put:
      tags:
        - Alert
      summary: Updates (CRUD) operation. Updates Alert from the database.
      requestBody:
        description: New state of alert that needs to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertDto'
          text/json:
            schema:
              $ref: '#/components/schemas/AlertDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AlertDto'
      responses:
        '204':
          description: 'Operation completed successfully, Alert has been updated'
  /api/Alert/paginated:
    get:
      tags:
        - Alert
      summary: Reads multiple entries from database but in paginated form.
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: isDescending
          in: query
          schema:
            type: boolean
        - name: filterBy
          in: query
          schema:
            type: string
        - name: filterValue
          in: query
          schema:
            type: string
        - name: filterType
          in: query
          schema:
            $ref: '#/components/schemas/FilterType'
      responses:
        '200':
          description: 'Operation completed successfully, one page returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AlertDtoPaginatedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AlertDtoPaginatedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AlertDtoPaginatedResultDto'
  /api/CriticalAlert:
    get:
      tags:
        - CriticalAlert
      summary: Read (CRUD) operation. Gets the CriticalAlert from MongoDb Database. Matches the record by Id.
      parameters:
        - name: id
          in: query
          description: Unique string that represents the entity in database.
          schema:
            type: string
      responses:
        '200':
          description: 'Operation completed successfully, requested resource found and returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
        '204':
          description: 'Operation completed successfully, requested resource does not exist'
    post:
      tags:
        - CriticalAlert
      summary: Create (CRUD) operation. Creates the CriticalAlert instance in MongoDb Database.
      description: "Id should not be passed. If it is passed it is going to be ignored.\r\nId is generated by the system"
      requestBody:
        description: CriticalAlert to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriticalAlertDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CriticalAlertDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CriticalAlertDto'
      responses:
        '201':
          description: "Operation completed successfully,\r\n            data record has been created with returned id."
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    delete:
      tags:
        - CriticalAlert
      summary: Deletes (CRUD) operation. Deletes CriticalAlert from the database.
      parameters:
        - name: id
          in: query
          description: Unique string that represents the entity to be deleted.
          schema:
            type: string
      responses:
        '204':
          description: 'Operation completed successfully, CriticalAlert has been deleted from database'
    put:
      tags:
        - CriticalAlert
      summary: Updates (CRUD) operation. Updates CriticalAlert from the database.
      requestBody:
        description: New state of alert that needs to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriticalAlertDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CriticalAlertDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CriticalAlertDto'
      responses:
        '204':
          description: 'Operation completed successfully, CriticalAlert has been updated'
  /api/CriticalAlert/paginated:
    get:
      tags:
        - CriticalAlert
      summary: Reads multiple entries from database but in paginated form.
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: isDescending
          in: query
          schema:
            type: boolean
        - name: filterBy
          in: query
          schema:
            type: string
        - name: filterValue
          in: query
          schema:
            type: string
        - name: filterType
          in: query
          schema:
            $ref: '#/components/schemas/FilterType'
      responses:
        '200':
          description: 'Operation completed successfully, one page returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CriticalAlertDtoPaginatedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/CriticalAlertDtoPaginatedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/CriticalAlertDtoPaginatedResultDto'
  /api/DataRecord/process:
    post:
      tags:
        - DataRecord
      summary: Receives the data and then proceeds to analyze it. if there is need create alerts and critical alerts.
      requestBody:
        description: Data record to be analyzed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRecordDto'
          text/json:
            schema:
              $ref: '#/components/schemas/DataRecordDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataRecordDto'
      responses:
        '204':
          description: 'Operation completed successfully, Data record analyzed.'
components:
  schemas:
    AirParticleStatus:
      enum:
        - Good
        - Normal
        - Bad
        - VeryBad
      type: string
    AirPollutionInfoDto:
      type: object
      properties:
        so2:
          type: number
          format: double
        no2:
          type: number
          format: double
        o3:
          type: number
          format: double
        co:
          type: number
          format: double
        pm10:
          type: number
          format: double
        pm25:
          type: number
          format: double
      additionalProperties: false
    AlertDto:
      type: object
      properties:
        id:
          type: string
          nullable: true
        measurementDate:
          type: string
          format: date-time
        stationCode:
          type: integer
          format: int32
        badParticles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AirParticleStatus'
          nullable: true
      additionalProperties: false
    AlertDtoPaginatedResultDto:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/AlertDto'
          nullable: true
        pageIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalRecords:
          type: integer
          format: int32
      additionalProperties: false
    CriticalAlertDto:
      type: object
      properties:
        id:
          type: string
          nullable: true
        measurementDate:
          type: string
          format: date-time
        stationCode:
          type: integer
          format: int32
        badParticles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AirParticleStatus'
          nullable: true
        startOfBadMeasurement:
          type: string
          format: date-time
        colorChangedTo:
          $ref: '#/components/schemas/LightColor'
        dateOfColorChange:
          type: string
          format: date-time
      additionalProperties: false
    CriticalAlertDtoPaginatedResultDto:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/CriticalAlertDto'
          nullable: true
        pageIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalRecords:
          type: integer
          format: int32
      additionalProperties: false
    DataRecordDto:
      type: object
      properties:
        measurementDate:
          type: string
          format: date-time
        stationCode:
          type: integer
          format: int32
        airPollutionInfo:
          $ref: '#/components/schemas/AirPollutionInfoDto'
      additionalProperties: false
    FilterType:
      enum:
        - Equal
        - LessThen
        - GraterThen
      type: string
    LightColor:
      enum:
        - Blue
        - Green
        - Yellow
        - Red
      type: string
