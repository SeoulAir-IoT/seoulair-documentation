openapi: 3.0.1
info:
  title: SeoulAir Data microservice.
  description: |-
    SeoulAir Data is microservice that is part of SeoulAir project.
    For more information visit Gitlab Repository
  contact:
    name: Gitlab Repository
    url: 'http://gitlab.com/seoulair/seoulair-data.git'
  version: 1.0.0
servers:
  - url: 'http://localhost:5600'
paths:
  /api/Actuator/IsOn:
    get:
      tags:
        - Actuator
      summary: Checks if microservice is receiving data on on MQTT topic.
      responses:
        '200':
          description: Operation completed successfully and boolean result is returned
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/Actuator/TurnOn:
    post:
      tags:
        - Actuator
      summary: Connects microservice to MQTT topic and starts receiving data. Data is then sent to Analytics service.
      responses:
        '204':
          description: Operation completed successfully. Microservice is now on.
  /api/Actuator/TurnOff:
    post:
      tags:
        - Actuator
      summary: "Disconnects microservice from MQTT topic.\r\nAfter this action service is going to stop receiving and sending data."
      responses:
        '204':
          description: Operation completed successfully. Microservice is now on.
  /api/AirPollution:
    get:
      tags:
        - AirPollution
      summary: Read (CRUD) operation. Gets the DataRecord from MongoDb Database. Matches the record by Id.
      parameters:
        - name: id
          in: query
          description: Unique string that represents the entity in database.
          schema:
            type: string
      responses:
        '200':
          description: 'Operation completed successfully, requested resource found and returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DataRecordDto'
        '204':
          description: 'Operation completed successfully, requested resource does not exist'
    post:
      tags:
        - AirPollution
      summary: Create (CRUD) operation. Creates the DataRecord instance in MongoDb Database.
      description: "Id should not be passed. If it is passed it is going to be ignored.\r\nId is generated by the system"
      requestBody:
        description: Data record to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRecordDto'
          text/json:
            schema:
              $ref: '#/components/schemas/DataRecordDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataRecordDto'
      responses:
        '201':
          description: "Operation completed successfully,\r\n            data record has been created with returned id."
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    delete:
      tags:
        - AirPollution
      summary: Deletes (CRUD) operation. Deletes data record from the database.
      parameters:
        - name: id
          in: query
          description: Unique string that represents the entity to be deleted.
          schema:
            type: string
      responses:
        '204':
          description: 'Operation completed successfully, data record has been deleted from database'
  /api/AirPollution/page:
    get:
      tags:
        - AirPollution
      summary: Reads multiple entries from database but in paginated form.
      parameters:
        - name: pageIndex
          in: query
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          schema:
            type: integer
            format: int32
        - name: orderBy
          in: query
          schema:
            type: string
        - name: isDescending
          in: query
          schema:
            type: boolean
        - name: filterBy
          in: query
          schema:
            type: string
        - name: filterValue
          in: query
          schema:
            type: string
        - name: filterType
          in: query
          schema:
            $ref: '#/components/schemas/FilterType'
      responses:
        '200':
          description: 'Operation completed successfully, one page returned'
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DataRecordDtoPaginatedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DataRecordDtoPaginatedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DataRecordDtoPaginatedResultDto'
components:
  schemas:
    AirPollutionInfoDto:
      type: object
      properties:
        so2:
          type: number
          format: double
        no2:
          type: number
          format: double
        o3:
          type: number
          format: double
        co:
          type: number
          format: double
        pm10:
          type: number
          format: double
        pm25:
          type: number
          format: double
      additionalProperties: false
    DataRecordDto:
      type: object
      properties:
        id:
          type: string
          nullable: true
        measurementDate:
          type: string
          format: date-time
        stationInfo:
          $ref: '#/components/schemas/StationInfoDto'
        airPollutionInfo:
          $ref: '#/components/schemas/AirPollutionInfoDto'
      additionalProperties: false
    DataRecordDtoPaginatedResultDto:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/DataRecordDto'
          nullable: true
        pageIndex:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        totalRecords:
          type: integer
          format: int32
      additionalProperties: false
    FilterType:
      enum:
        - Equal
        - LessThen
        - GraterThen
      type: string
    StationInfoDto:
      type: object
      properties:
        stationCode:
          type: integer
          format: int32
        stationAddress:
          type: string
          nullable: true
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
      additionalProperties: false
